{"version":3,"sources":["component/Home/Home.js","component/Navbar/Navbar.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["Home","changeName","event","_this","props","target","value","name","this","react_default","a","createElement","className","type","onChange","Component","connect","state","dispatch","library","add","faBars","Navbar","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","expandMenu","setState","prev","menuActive","id","onClick","href","React","App","component_Navbar_Navbar","component_Home_Home","Boolean","window","location","hostname","match","initialState","rootReducer","arguments","length","undefined","action","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44e1ae8e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nimport './Home.scss';\n\nclass Home extends Component {\n\n    changeName = (event)=>this.props.changeName(event.target.value)\n\n    render() {\n        let name = this.props.name;\n        return (\n            <div className=\"Home\">\n                <div>\n                    <h1>{name}</h1>\n                    <p>This is my personal website</p>\n                    <input type=\"text\" name=\"newName\" onChange={this.changeName}></input>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state)=>{\n  return {\n    name: state.name\n  }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n    return {\n        changeName: (name)=> {dispatch({type:'CHANGE_NAME', name:name})}\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React from 'react';\nimport './Navbar.scss'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faBars)\n\nclass Navbar extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            menuActive: false\n        }\n    }\n\n    expandMenu = ()=>{\n        this.setState((prev)=>{ \n            return { menuActive: !prev.menuActive }\n         })\n    }\n\n    render() {\n        return (\n            <div>\n                <button className=\"cn-button\" id=\"cn-button\" onClick={this.expandMenu}>{this.state.menuActive?'-':'+'}</button>\n                <div className={this.state.menuActive ? 'cn-wrapper opened-nav' : 'cn-wrapper'} id=\"cn-wrapper\">\n                    <ul>\n                        <li><a href=\"#\"><span>a</span></a></li>\n                        <li><a href=\"#\"><span>b</span></a></li>\n                        <li><a href=\"#\"><span>c</span></a></li>\n                        <li><a href=\"#\"><span>d</span></a></li>\n                        <li><a href=\"#\"><span>e</span></a></li>\n                    </ul>\n                </div>\n                <div id=\"cn-overlay\" className={this.state.menuActive? 'cn-overlay on-overlay' : 'cn-overlay'}></div>\n            </div>\n            // <div className={this.state.menuActive ? 'navbar active': 'navbar'}>\n            //     <div className=\"toggle\">\n            //         <FontAwesomeIcon icon=\"bars\" onClick={this.expandMenu}/>\n            //     </div>\n            //     <ul className={this.state.menuActive ? '' : 'inactive'}>\n            //         <li><a href=\"#\">Home</a></li>\n            //         <li><a href=\"#\">Profile</a></li>\n            //         <li><a href=\"#\">Game</a></li>\n            //         <li><a href=\"#\">Projects</a></li>\n            //         <li className='contactMe'><a href=\"#\">Contact Me :)</a></li>\n            //     </ul>\n            // </div>\n        )\n    }\n}\n\nexport default Navbar","import React, { Component } from 'react';\n\nimport Home from './component/Home/Home'\nimport Navbar from './component/Navbar/Navbar';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar></Navbar>\n        <Home></Home>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    name: \"Alpha Lau\"\n}\n\nconst rootReducer = (state = initialState, action)=>{\n    switch(action.type) {\n        case 'CHANGE_NAME':\n            return {\n                ...state,\n                name: action.name\n            }\n        default:\n            return state\n    }\n}\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux' ;\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}