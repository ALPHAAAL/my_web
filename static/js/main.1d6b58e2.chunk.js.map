{"version":3,"sources":["component/Home/Home.js","component/Navbar/Navbar.js","component/Profile/Profile.js","component/Game/Game.js","component/Project/Project.js","component/Contact/Contact.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["Home","changeName","event","_this","props","target","value","name","this","react_default","a","createElement","className","type","onChange","Component","connect","state","dispatch","Navbar","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","expandMenu","setState","prev","menuActive","onClick","react_router_dom","to","fa","React","Profile","Game","Project","Contact","App","component_Navbar_Navbar","react_router","exact","path","component","Boolean","window","location","hostname","match","initialState","rootReducer","arguments","length","undefined","action","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d6b58e2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nimport './Home.scss';\n\nclass Home extends Component {\n\n    changeName = (event)=>this.props.changeName(event.target.value)\n\n    render() {\n        let name = this.props.name;\n        return (\n            <div className=\"Home\">\n                <div>\n                    <h1>{name}</h1>\n                    <p>This is my personal website</p>\n                    <input type=\"text\" name=\"newName\" onChange={this.changeName}></input>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state)=>{\n  return {\n    name: state.name\n  }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n    return {\n        changeName: (name)=> {dispatch({type:'CHANGE_NAME', name:name})}\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\nimport './Navbar.scss'\nimport {  Link } from 'react-router-dom'\nimport { FaGithub, FaUserCircle, FaGamepad, FaHome, FaAddressBook } from 'react-icons/fa'\n\n\nclass Navbar extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            menuActive: false\n        }\n    }\n\n    expandMenu = ()=>{\n        this.setState((prev)=>{ \n            return { menuActive: !prev.menuActive }\n         })\n    }\n\n    render() {\n        return (\n            <div className='menu'>\n                <button className=\"toggle\" onClick={this.expandMenu}>{this.state.menuActive?'-':'+'}</button>\n                <div className={this.state.menuActive ? 'cn-wrapper opened-nav' : 'cn-wrapper inactive'}>\n                    <ul>\n                        <li><Link to=\"/my_web/Profile\" onClick={this.expandMenu}><span><FaUserCircle/></span></Link></li>\n                        <li><Link to=\"/my_web/Project\" onClick={this.expandMenu}><span><FaGithub/></span></Link></li>\n                        <li><Link to=\"/my_web/\" onClick={this.expandMenu}><span><FaHome/></span></Link></li>\n                        <li><Link to=\"/my_web/Game\" onClick={this.expandMenu}><span><FaGamepad/></span></Link></li>\n                        <li><Link to=\"/my_web/Contact\" onClick={this.expandMenu}><span><FaAddressBook/></span></Link></li>\n                    </ul>\n                </div>\n                <div className={this.state.menuActive? 'overlay-inactive overlay-active' : 'overlay-inactive'}></div>\n            </div>\n            // <div className={this.state.menuActive ? 'navbar active': 'navbar'}>\n            //     <div className=\"toggle\">\n            //         <FontAwesomeIcon icon=\"bars\" onClick={this.expandMenu}/>\n            //     </div>\n            //     <ul className={this.state.menuActive ? '' : 'inactive'}>\n            //         <li><a href=\"#\">Home</a></li>\n            //         <li><a href=\"#\">Profile</a></li>\n            //         <li><a href=\"#\">Game</a></li>\n            //         <li><a href=\"#\">Projects</a></li>\n            //         <li className='contactMe'><a href=\"#\">Contact Me :)</a></li>\n            //     </ul>\n            // </div>\n        )\n    }\n}\n\nexport default Navbar","import React from 'react';\n\nclass Profile extends React.Component {\n    render() {\n        return (\n            <div>This is profile page</div>\n        )\n    }\n}\n\nexport default Profile","import React from 'react';\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div>This is profile page</div>\n        )\n    }\n}\n\nexport default Game","import React from 'react';\n\nclass Project extends React.Component {\n    render() {\n        return (\n            <div>This is project page</div>\n        )\n    }\n}\n\nexport default Project","import React from 'react';\n\nclass Contact extends React.Component {\n    render() {\n        return (\n            <div>This is contact page</div>\n        )\n    }\n}\n\nexport default Contact","import React, { Component } from 'react';\nimport {  BrowserRouter, Route } from 'react-router-dom'\n\nimport Home from './component/Home/Home'\nimport Navbar from './component/Navbar/Navbar';\nimport Profile from './component/Profile/Profile';\nimport Game from './component/Game/Game';\nimport Project from './component/Project/Project';\nimport Contact from './component/Contact/Contact';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Navbar></Navbar>\n          <Route exact path='/my_web' component={Home}></Route>\n          <Route path='/my_web/Profile' component={Profile}></Route>\n          <Route path='/my_web/Game' component={Game}></Route>\n          <Route path='/my_web/Project' component={Project}></Route>\n          <Route path='/my_web/Contact' component={Contact}></Route>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    name: \"Alpha Lau\"\n}\n\nconst rootReducer = (state = initialState, action)=>{\n    switch(action.type) {\n        case 'CHANGE_NAME':\n            return {\n                ...state,\n                name: action.name\n            }\n        default:\n            return state\n    }\n}\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux' ;\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}